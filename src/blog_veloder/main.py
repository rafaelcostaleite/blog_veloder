from crewai import Crew, Task
from langchain_openai import ChatOpenAI
from config.settings import Settings
from agents.research_agent import TriathlonResearchAgent
from agents.content_writer_agent import ContentWriterAgent
from agents.seo_optimizer_agent import SEOOptimizerAgent
from utils.file_handler import FileHandler
import os

def main():
    """Fun√ß√£o principal que executa o fluxo completo"""
    
    try:
        # Valida configura√ß√µes
        Settings.validate_config()
        
        # Inicializa o modelo de linguagem
        llm = ChatOpenAI(
            model=Settings.DEFAULT_MODEL,
            temperature=Settings.TEMPERATURE,
            api_key=Settings.OPENAI_API_KEY
        )
        
        # Cria os diret√≥rios necess√°rios
        FileHandler.ensure_directory(Settings.DATA_DIR)
        FileHandler.ensure_directory(Settings.OUTPUT_DIR)
        
        print("üöÄ Iniciando projeto CrewAI - Triathlon Blog Automation\n")
        
        # Inicializa os agentes
        research_agent = TriathlonResearchAgent(llm)
        writer_agent = ContentWriterAgent(llm)
        seo_agent = SEOOptimizerAgent(llm)
        
        # Define as tarefas
        research_task = Task(
            description="""Realizar pesquisa abrangente sobre provas de triathlon no Brasil para 2024.
            Coletar informa√ß√µes sobre datas, locais, dist√¢ncias, pre√ßos de inscri√ß√£o e websites oficiais.
            Estruturar os dados em formato JSON organizado e salvar no arquivo data/triathlon_events.json""",
            agent=research_agent.agent,
            expected_output="Arquivo JSON com dados estruturados das provas de triathlon"
        )
        
        writing_task = Task(
            description="""Ler o arquivo JSON gerado pela pesquisa e criar um post envolvente para blog.
            Aplicar t√©cnicas do livro 'Brevidade Inteligente' para criar conte√∫do que prenda a aten√ß√£o.
            O post deve ser informativo, acion√°vel e otimizado para engajamento.
            Salvar o conte√∫do em formato Markdown no arquivo output/triathlon_blog_post.md""",
            agent=writer_agent.agent,
            expected_output="Post de blog em Markdown otimizado para engajamento",
            context=[research_task]
        )
        
        seo_task = Task(
            description="""Revisar e otimizar o post criado aplicando as melhores pr√°ticas de SEO.
            Adicionar meta tags, otimizar t√≠tulos, implementar palavras-chave estrat√©gicas,
            criar estrutura de FAQ e preparar schema markup.
            Gerar tamb√©m um relat√≥rio detalhado de an√°lise SEO.
            Salvar vers√£o otimizada e relat√≥rio nos arquivos correspondentes.""",
            agent=seo_agent.agent,
            expected_output="Post otimizado para SEO e relat√≥rio de an√°lise",
            context=[writing_task]
        )
        
        # Cria e executa a crew
        crew = Crew(
            agents=[
                research_agent.agent,
                writer_agent.agent, 
                seo_agent.agent
            ],
            tasks=[research_task, writing_task, seo_task],
            verbose=True,
            process="sequential"  # Execu√ß√£o sequencial
        )
        
        print("üîç Executando pesquisa de provas de triathlon...")
        print("‚úçÔ∏è  Criando post otimizado para blog...")
        print("üéØ Aplicando otimiza√ß√µes de SEO...")
        
        # Executa o fluxo
        result = crew.kickoff()
        
        print("\n" + "="*60)
        print("üéâ PROJETO CONCLU√çDO COM SUCESSO!")
        print("="*60)
        print("\nüìÅ Arquivos gerados:")
        print("   üìä data/triathlon_events.json - Dados da pesquisa")
        print("   üìù output/triathlon_blog_post.md - Post original")
        print("   üéØ output/triathlon_blog_post_seo_optimized.md - Post otimizado")
        print("   üìà output/seo_analysis_report.md - Relat√≥rio SEO")
        
        print(f"\nü§ñ Resultado final da execu√ß√£o:")
        print(result)
        
        return result
        
    except Exception as e:
        print(f"‚ùå Erro durante a execu√ß√£o: {str(e)}")
        return None

if __name__ == "__main__":
    main()